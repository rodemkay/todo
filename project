#!/bin/bash
# Project Management CLI Tool
# Manages active project for Todo filtering

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PYTHON_SCRIPT="$SCRIPT_DIR/hooks/project_filter.py"

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Function to list projects from database
list_projects() {
    echo -e "${BLUE}üìÅ Available Projects:${NC}"
    echo ""
    ssh rodemkay@159.69.157.54 "cd /var/www/forexsignale/staging && wp db query 'SELECT id, name, icon, (SELECT COUNT(*) FROM stage_project_todos WHERE project_id = stage_projects.id AND status != \"completed\") as open_tasks FROM stage_projects WHERE is_active = 1 ORDER BY sort_order ASC'" 2>/dev/null | column -t -s $'\t'
}

# Function to set active project
set_project() {
    local project_id=$1
    
    if [ -z "$project_id" ]; then
        echo -e "${RED}‚ùå Please provide a project ID${NC}"
        echo "Usage: ./project set <id>"
        return 1
    fi
    
    # Get project details
    project_info=$(ssh rodemkay@159.69.157.54 "cd /var/www/forexsignale/staging && wp db query 'SELECT name FROM stage_projects WHERE id = $project_id AND is_active = 1' --skip-column-names 2>/dev/null")
    
    if [ -z "$project_info" ]; then
        echo -e "${RED}‚ùå Project ID $project_id not found or inactive${NC}"
        return 1
    fi
    
    # Write to active project file
    cat > /tmp/active_project.json <<EOF
{
  "project_id": $project_id,
  "project_name": "$project_info",
  "user_id": 1,
  "timestamp": $(date +%s)
}
EOF
    
    chmod 666 /tmp/active_project.json
    echo -e "${GREEN}‚úÖ Active project set to: $project_info (ID: $project_id)${NC}"
}

# Function to show current project
show_current() {
    if [ -f "/tmp/active_project.json" ]; then
        echo -e "${BLUE}üìÅ Current Active Project:${NC}"
        cat /tmp/active_project.json | python3 -m json.tool
    else
        echo -e "${YELLOW}‚ö†Ô∏è  No active project set${NC}"
        echo "Use: ./project set <id> to set one"
    fi
}

# Function to clear active project
clear_project() {
    if [ -f "/tmp/active_project.json" ]; then
        rm /tmp/active_project.json
        echo -e "${GREEN}‚úÖ Active project filter cleared${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  No active project to clear${NC}"
    fi
}

# Main command handling
case "${1:-}" in
    list|ls)
        list_projects
        ;;
    set)
        set_project "$2"
        ;;
    current|show)
        show_current
        ;;
    clear|reset)
        clear_project
        ;;
    help|--help|-h)
        echo -e "${BLUE}üìÅ Project Management for Todo CLI${NC}"
        echo ""
        echo "Commands:"
        echo "  ./project list       - List all available projects"
        echo "  ./project set <id>   - Set active project filter"
        echo "  ./project current    - Show current active project"
        echo "  ./project clear      - Clear project filter (show all todos)"
        echo "  ./project help       - Show this help"
        echo ""
        echo "Examples:"
        echo "  ./project set 1      - Set Todo-Plugin as active project"
        echo "  ./project list       - See all projects with task counts"
        ;;
    *)
        echo -e "${YELLOW}Usage: ./project [list|set|current|clear|help]${NC}"
        echo "Run './project help' for more information"
        ;;
esac