<?php
/**
 * AJAX Handler class
 *
 * @package WP_Project_Todos
 */

namespace WP_Project_Todos;

class Ajax {
    
    private $model;
    
    public function __construct() {
        $this->model = new Todo_Model();
        $this->register_handlers();
    }
    
    /**
     * Register AJAX handlers
     */
    private function register_handlers() {
        add_action('wp_ajax_wp_project_todos_quick_edit', [$this, 'quick_edit']);
        add_action('wp_ajax_wp_project_todos_bulk_action', [$this, 'bulk_action']);
        add_action('wp_ajax_wp_project_todos_update_status', [$this, 'update_status']);
        add_action('wp_ajax_wp_project_todos_get_output', [$this, 'get_output']);
        add_action('wp_ajax_send_single_todo', [$this, 'send_single_todo']);
        // Webhook Server Control
        add_action('wp_ajax_webhook_server_control', [$this, 'webhook_server_control']);
        add_action('wp_ajax_trigger_todo', [$this, 'trigger_todo']);
    }
    
    public function quick_edit() {
        check_ajax_referer('wp_project_todos', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_send_json_error('Unauthorized');
        }
        
        $id = intval($_POST['id']);
        $field = sanitize_key($_POST['field']);
        $value = sanitize_text_field($_POST['value']);
        
        $allowed_fields = ['title', 'status', 'priority', 'scope', 'working_directory'];
        
        if (!in_array($field, $allowed_fields)) {
            wp_send_json_error('Invalid field');
        }
        
        $result = $this->model->update($id, [$field => $value]);
        
        if (is_wp_error($result)) {
            wp_send_json_error($result->get_error_message());
        } else {
            wp_send_json_success('Updated');
        }
    }
    
    public function bulk_action() {
        check_ajax_referer('wp_project_todos', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_send_json_error('Unauthorized');
        }
        
        $action = sanitize_key($_POST['bulk_action']);
        $ids = array_map('intval', $_POST['ids']);
        
        switch ($action) {
            case 'delete':
                foreach ($ids as $id) {
                    $this->model->delete($id);
                }
                break;
            case 'complete':
                foreach ($ids as $id) {
                    $this->model->update_status($id, 'completed');
                }
                break;
            case 'reset':
                foreach ($ids as $id) {
                    $this->model->update_status($id, 'pending');
                }
                break;
            case 'block':
                foreach ($ids as $id) {
                    $this->model->update_status($id, 'blocked');
                }
                break;
            default:
                wp_send_json_error('Invalid action');
                return;
        }
        
        wp_send_json_success('Bulk action completed');
    }
    
    public function update_status() {
        check_ajax_referer('wp_project_todos', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_send_json_error('Unauthorized');
        }
        
        $id = intval($_POST['id']);
        $status = sanitize_key($_POST['status']);
        
        $allowed_statuses = ['pending', 'in_progress', 'completed', 'blocked'];
        
        if (!in_array($status, $allowed_statuses)) {
            wp_send_json_error('Invalid status');
        }
        
        $result = $this->model->update_status($id, $status);
        
        if ($result) {
            wp_send_json_success('Status updated');
        } else {
            wp_send_json_error('Update failed');
        }
    }
    
    public function get_output() {
        check_ajax_referer('wp_project_todos', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_send_json_error('Unauthorized');
        }
        
        $id = intval($_POST['id']);
        $todo = $this->model->get($id);
        
        if (!$todo) {
            wp_send_json_error('Todo not found');
        }
        
        $output = json_decode($todo->claude_output ?: '[]', true);
        
        wp_send_json_success([
            'status' => $todo->status,
            'output' => $output,
            'started_at' => $todo->started_at,
            'completed_at' => $todo->completed_at
        ]);
    }
    
    /**
     * Send single todo to Claude
     */
    public function send_single_todo() {
        // Check nonce
        if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'send_todo_to_claude')) {
            wp_send_json_error('Invalid nonce');
        }
        
        // Check permissions
        if (!current_user_can('manage_options')) {
            wp_send_json_error('Unauthorized');
        }
        
        $todo_id = isset($_POST['todo_id']) ? intval($_POST['todo_id']) : 0;
        
        if (!$todo_id) {
            wp_send_json_error('Invalid todo ID');
        }
        
        // Trigger via webhook for specific todo
        $result = $this->trigger_webhook_specific($todo_id);
        
        if ($result) {
            wp_send_json_success('Todo #' . $todo_id . ' sent to Claude');
        } else {
            wp_send_json_error('Failed to send todo to Claude');
        }
    }
    
    /**
     * Trigger todo execution (all todos)
     */
    public function trigger_todo() {
        // Check permissions
        if (!current_user_can('manage_options')) {
            wp_send_json_error('Unauthorized');
        }
        
        // Trigger via webhook (all todos)
        $result = $this->trigger_webhook();
        
        if ($result) {
            wp_send_json_success('All todos triggered successfully');
        } else {
            wp_send_json_error('Failed to trigger todos');
        }
    }
    
    /**
     * Call webhook to trigger all todos
     */
    private function trigger_webhook() {
        // Webhook configuration
        $webhook_url = 'http://100.89.207.122:9999/trigger';
        $webhook_token = 'secure_token_change_me_123456';
        
        // Make HTTP request
        $response = wp_remote_post($webhook_url, [
            'headers' => [
                'Authorization' => 'Bearer ' . $webhook_token,
                'Content-Type' => 'application/json'
            ],
            'timeout' => 5,
            'body' => json_encode(['source' => 'wordpress'])
        ]);
        
        if (is_wp_error($response)) {
            error_log('Webhook error: ' . $response->get_error_message());
            return false;
        }
        
        $code = wp_remote_retrieve_response_code($response);
        return $code === 200;
    }
    
    /**
     * Call webhook to trigger specific todo
     */
    private function trigger_webhook_specific($todo_id) {
        // Webhook configuration
        $webhook_url = 'http://100.89.207.122:9999/trigger-specific';
        $webhook_token = 'secure_token_change_me_123456';
        
        // Make HTTP request
        $response = wp_remote_post($webhook_url, [
            'headers' => [
                'Authorization' => 'Bearer ' . $webhook_token,
                'Content-Type' => 'application/json'
            ],
            'timeout' => 5,
            'body' => json_encode(['todo_id' => $todo_id])
        ]);
        
        if (is_wp_error($response)) {
            error_log('Webhook error: ' . $response->get_error_message());
            return false;
        }
        
        $code = wp_remote_retrieve_response_code($response);
        return $code === 200;
    }
}
    /**
     * Handle webhook server control
     */
    public function webhook_server_control() {
        // Nonce prüfen
        if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'webhook_control')) {
            wp_send_json_error('Keine Berechtigung');
            return;
        }
        
        $action = sanitize_text_field($_POST['webhook_action']);
        $webhook_manager = '/home/rodemkay/www/react/webhook-manager.py';
        
        // Python-Befehl ausführen
        $command = "python3 $webhook_manager $action 2>&1";
        $output = shell_exec($command);
        
        // Parse Output für Status
        if ($action === 'status' || $action === 'start' || $action === 'restart') {
            $response = array(
                'running' => strpos($output, 'RUNNING') !== false,
                'pid' => null,
                'uptime' => null,
                'memory' => null,
                'logs' => null,
                'message' => ''
            );
            
            // PID extrahieren
            if (preg_match('/PID:\s*(\d+)/', $output, $matches)) {
                $response['pid'] = $matches[1];
            }
            
            // Uptime extrahieren
            if (preg_match('/Uptime:\s*(\d+)\s*seconds/', $output, $matches)) {
                $seconds = intval($matches[1]);
                $minutes = floor($seconds / 60);
                $hours = floor($minutes / 60);
                
                if ($hours > 0) {
                    $response['uptime'] = sprintf('%d Stunden %d Minuten', $hours, $minutes % 60);
                } else {
                    $response['uptime'] = sprintf('%d Minuten', $minutes);
                }
            }
            
            // Memory extrahieren
            if (preg_match('/Memory:\s*([\d.]+)\s*MB/', $output, $matches)) {
                $response['memory'] = $matches[1] . ' MB';
            }
            
            // Aktion-spezifische Nachrichten
            switch($action) {
                case 'start':
                    $response['message'] = $response['running'] ? 
                        '✅ Webhook Server wurde gestartet!' : 
                        '❌ Fehler beim Starten des Servers';
                    break;
                case 'restart':
                    $response['message'] = $response['running'] ? 
                        '✅ Webhook Server wurde neugestartet!' : 
                        '❌ Fehler beim Neustarten des Servers';
                    break;
            }
            
            // Logs aus Log-Datei lesen
            $log_file = '/tmp/webhook-server.log';
            if (file_exists($log_file)) {
                $logs = shell_exec("tail -n 10 $log_file");
                if ($logs) {
                    $response['logs'] = $logs;
                }
            }
            
            wp_send_json_success($response);
        } elseif ($action === 'stop') {
            $stopped = strpos($output, 'stopped') !== false;
            wp_send_json_success(array(
                'running' => false,
                'message' => $stopped ? 
                    '✅ Webhook Server wurde gestoppt!' : 
                    '❌ Fehler beim Stoppen des Servers'
            ));
        } else {
            wp_send_json_error('Unbekannte Aktion');
        }
    }
